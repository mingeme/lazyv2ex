name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: lazyv2ex
            asset_name: lazyv2ex-linux-amd64
          # Temporarily disable ARM64 Linux build due to OpenSSL issues
          # - os: ubuntu-latest
          #   target: aarch64-unknown-linux-gnu
          #   artifact_name: lazyv2ex
          #   asset_name: lazyv2ex-linux-arm64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: lazyv2ex
            asset_name: lazyv2ex-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: lazyv2ex
            asset_name: lazyv2ex-macos-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      # Skip ARM64 Linux build for now as it requires more complex setup
      - name: Skip ARM64 Linux build
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: echo "Skipping ARM64 Linux build for now"

      - name: Build binary
        if: matrix.target != 'aarch64-unknown-linux-gnu'
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare binary for upload
        if: matrix.target != 'aarch64-unknown-linux-gnu'
        run: |
          # Create a directory for the renamed binaries
          mkdir -p artifacts
          # Copy and rename the binary to avoid conflicts
          cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} artifacts/${{ matrix.asset_name }}

      - name: Upload binary to release
        if: matrix.target != 'aarch64-unknown-linux-gnu'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: artifacts/${{ matrix.asset_name }}
          asset_name: ${{ matrix.asset_name }}
          tag: ${{ github.ref }}
          overwrite: true

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-and-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: extract_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Release v${{ env.VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
